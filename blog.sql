-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Окт 22 2019 г., 20:54
-- Версия сервера: 8.0.15
-- Версия PHP: 7.3.2

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `blog`
--

-- --------------------------------------------------------

--
-- Структура таблицы `failed_jobs`
--

CREATE TABLE `failed_jobs` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `connection` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `queue` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `payload` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `exception` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `maintexts`
--

CREATE TABLE `maintexts` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `body` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `maintexts`
--

INSERT INTO `maintexts` (`id`, `name`, `body`, `url`, `status`, `created_at`, `updated_at`, `user_id`, `category_id`) VALUES
(1, 'Новый алгоритм поиска пути в Factorio', 'На прошлой неделе мы говорили в своём блоге об изменениях, которые позволят врагам (biters) не наталкиваться друг на друга, но это было не единственное обновление, связанное с biter-ами. Совпало так, что в обновления этой недели вошло то, над чем мы работали предыдущие несколько недель — обновление системы поиска пути для врагов.\r\n\r\nПоиск пути\r\n\r\nКогда юнит хочет куда-то переместиться, ему сначала нужно понять, как туда добраться. В самом простом случае можно двигаться прямиком к цели, но на пути иногда возникают препятствия — скалы, деревья, гнёзда врагов (spawners), юниты игрока. Чтобы проложить дорогу, мы должны сообщить функции поиска пути (pathfinder) текущую и конечную позиции, а pathfinder вернёт нам (возможно, через много тактов) путь, который просто является набором промежуточных точек (waypoints), по которым должен двигаться юнит, чтобы добраться до места назначения.\r\n\r\nДля выполнения своей работы pathfinder использует алгоритм под названием A* (произносится «A star»). Простой пример поиска пути при помощи A* показан на видео: biter хочет найти путь в обход скал. Функция поиска пути начинает исследовать карту вокруг biter-а (исследование показано белыми точками). Сначала она пытается пойти напрямик к цели, но как только достигает скал, «разливается» в обе стороны, пытаясь найти позицию из которой снова можно будет двигаться к цели.\r\n\r\nКаждая точка в анимации обозначает узел. Каждый узел запоминает расстояние от начала поиска и оценку расстояния от этого узла до цели (эта оценка вычисляется эвристической функцией). Именно благодаря эвристической функции работает A* — она направляет алгоритм в верную сторону.\r\n\r\nВ простейшем случае эта функция является просто вычислением расстояния по прямой от узла до позиции цели — именно такой подход мы использовали в Factorio с самого начала разработки, и благодаря ему алгоритм изначально движется по прямой. Однако это не единственный вариант — ели эвристическая функция знала бы о некоторых из препятствий, то могла бы направлять алгоритм в обход, что ускорило бы поиск, потому что не пришлось бы исследовать лишние узлы. Очевидно, что чем умнее эвристика, тем сложнее её реализовать.\r\n\r\nПростая эвристическая функция оценки расстояния по прямой хороша для поиска путей на относительно коротких расстояниях. Она устраивала нас в предыдущих версиях Factorio — почти всегда biter-ы перемещались на дальние расстояния только из-за того, что их приводило в гнев загрязнение, а такое случалось не очень часто. Однако теперь у нас есть артиллерия. Артиллерия может запросто стрелять по огромным количествам biter-ов с другой стороны большого озера (и «агрить» их), после чего они пытаются проложить путь в обход озера. На видео ниже показано, как простой алгоритм A*, который мы использовали ранее, пытается обойти озеро.\r\n\r\nСокращение блоков\r\n\r\nПоиск пути — это задача, имеющая долгую историю, и существует множество техник его улучшения. Часть этих техник относится к категории иерархического поиска пути: в этом случае карта сначала упрощается, на этой упрощённой карте находится путь, который затем используется для поиска настоящего пути. Повторюсь, конкретных реализаций такой методики существует несколько, но все они требуют упрощения пространства поиска.\r\n\r\nКак же можно упростить мир Factorio? Наши карты генерируются случайным образом и постоянно изменяются: размещение и удаление сущностей (например, сборщиков, стен или турелей) — это, наверно, самая базовая механика всей игры. Мы не хотим пересчитывать всю упрощённую карту при каждом добавлении или удалении сущности. В то же время, если упрощать карту заново каждый раз, когда нам нужно найти путь, то можно запросто потерять весь полученный выигрыш в производительности.\r\n\r\nОдному из людей с доступом к исходному коду игры (Allaizn) пришла в голову идея. которую я в результате реализовал. Теперь эта идея кажется очевидной.\r\n\r\nИгра основана на блоках размером 32x32 тайлов. Процесс упрощения заменяет каждый блок одним или несколькими абстрактными узлами. Так как наша цель заключается в улучшении поиска пути вокруг озёр, мы можем игнорировать все сущности и рассматривать только тайлы: по воде двигаться нельзя, по суше — можно. Мы разделяем каждый блок на отдельные компоненты. Компонент — это область тайлов, в которой юнит может добраться с одного тайла внутри компонента до любого другого тайла того же компонента. На изображении ниже блок разделён на два отдельных компонента, красный и зелёный. Каждый из этих компонентов станет одним абстрактным узлом — по сути, весь блок сокращается до двух «точек».\r\n\r\nСамая важная мысль Allaizn заключалась в том, что нам не нужно хранить компонент для каждого тайла карты — достаточно запомнить компоненты тайлов по периметру каждого блока, потому что нас интересует только то, с чем соединены другие компоненты (в соседних блоках) каждого компонента, а это зависит только от тайлов, которые находятся на самой границе блока.\r\n\r\nИерархический поиск пути\r\n\r\nИтак, мы выяснили, как упростить карту, но как же использовать это для поиска путей? Как я и говорил, существует множество техник иерархического поиска пути. Простейшая идея заключается в нахождении пути при помощи абстрактных узлов от начала до цели, то есть путь будет являться списком компонентов блоков, которые нужно посетить. После чего мы используем серию старых добрых поисков A*, чтобы конкретно выяснить, как двигаться от одного компонента блока к другому.\r\n\r\nПроблема здесь заключается в том, что мы слишком уж упростили карту: что, если переместиться из одного блока в другой невозможно, потому что какие-то сущности (например, скалы) блокируют путь? При сокращении блоков мы игнорируем все сущности, поэтому знаем только, что тайлы между блоками каким-то образом связаны, но совершенно ничего не знаем о том, можно ли передвигаться от одного к другому.\r\n\r\nРешение заключается в том, чтобы использовать упрощение просто как «рекомендацию» для реального поиска. В частности, мы будем применять его для создания умной версии эвристической функции поиска.\r\n\r\nВ результате мы получили следующую схему: у нас есть два pathfinder: базовый pathfinder, который находит настоящий путь, и абстрактный pathfinder, предоставляющий базовому pathfinder эвристическую функцию. Каждый раз, когда базовый pathfinder создаёт новый базовый узел, он вызывает абстрактный pathfinder для получения оценки расстояния до цели. Абстрактный pathfinder действует в обратном порядке — он начинает с цели поиска и прокладывает дорогу к началу, переходя от одного компонента блока к другому. Когда абстрактный поиск находит блок и компонент, в котором создаётся новый базовый узел, он использует расстояние от начала абстрактного поиска (которое, как я говорил, является позицией цели всего поиска) для вычисления оценки расстояния от нового базового узла до общей цели.\r\n\r\nОднако выполнение всего pathfinder для каждого отдельного узла будет далеко не быстрым, даже если абстрактный pathfinder переходит от одного блока к другому. Поэтому вместо этого мы используем схему под названием «обратный возобновляемый A*» (Reverse Resumable A*). «Обратный» означает, что он, как я говорил выше, выполняется от цели к началу. «Возобновляемый» означает, что после нахождения блока, который интересен базовому pathfinder, мы сохраняем все его узлы в памяти. Когда в следующий раз базовый pathfinder создаёт новый узел и ему требуется оценка расстояния, мы просто смотрим на абстрактные узлы, сохранённые из предыдущего поиска. При этом есть большая вероятность того, что требуемый абстрактный узел всё ещё будет в памяти (в конце концов, один абстрактный узел покрывает большую часть блока, а часто и весь блок).\r\n\r\nДаже если базовый pathfinder создаёт узел, находящийся в блоке, не покрытом ни одним из абстрактных узлов, нам не нужно заново выполнять весь абстрактный поиск целиком. Удобное свойство алгоритма A* заключается в том, что даже после того, как он «завершает работу» и находит путь, он продолжает выполнение, исследуя узлы вокруг уже исследованных узлов. И именно это мы делаем, если нам нужна оценка расстояния для базового узла, расположенного в блоке, ещё не покрытом абстрактным поиском: мы возобновляем абстрактный поиск с узлов, хранящихся в памяти, пока он не расширится до узла, который нам нужен.\r\n\r\nНа видео ниже показана новая система поиска пути в действии. Синие круги — это абстрактные узлы; белые точки — базовый поиск. Pathfinder в видео сильно замедлен по сравнению с игровым, чтобы показать, как он работает. При обычной скорости весь поиск занимает всего несколько тактов. Заметьте, что базовый поиск, который по-прежнему использует старый алгоритм, который мы применяли всегда, просто волшебным образом «знает», как двигаться в обход озера.\r\n\r\nТак как абстрактный pathfinder используется только для получения эвристической оценки расстояния, базовый поиск довольно легко может отступать от предложенного абстрактным поиском пути. Это значит, что даже несмотря на то, что схема сокращения блоков игнорирует все сущности, базовый pathfinder почти без проблем может обходить их. Благодаря игнорированию сущностей в процессе упрощения карты нам не нужно повторять его заново при каждом добавлении или удалении сущности, достаточно покрывать только те тайлы, которые были изменены (например, как в случае с мусорным полигоном), что происходит намного реже, чем размещение сущностей.\r\n\r\nКроме того, это означает, что мы по сути используем тот же pathfinder, которым пользовались годами, обновилась только эвристическая функция. То есть это изменение не затронет множество других систем, и повлияет только на скорость поиска.', 'factoriopath', '', NULL, NULL, 0, 0),
(2, 'Crusader Kings II гайд по DLC', 'Так как Crusader Kings II только что стала навсегда бесплатной, но её нескончаемые DLC нет, решил накатать гайд, чтобы помочь новым игрокам определиться, какие из DLC им стоит купить, а какие можно обойти стороной. В данный момент на все DLC скидка 50%, будет действовать ещё сутки с лишним.\r\n\r\nПрежде всего, стоит отметить, что DLC The Old Gods (позволяющее играть за язычников и в частности за Рюрика) можно получить также бесплатно, если подписаться на новости о CK3 по этой ссылке: https://www.crusaderkings.com/\r\nНа пикабу уже есть пост с инструкцией: Expansion - Crusader Kings II: The Old Gods (DLC)\r\nА если вам понравится мой гайд ниже, можете меня отблагодарить, подписавшись на это дело по реферальной ссылке, которую я оставлю в комментариях. Надеюсь, если я даю людям выбор, да ещё и реферальную ссылку прячу дальше чем обычную, это не засчитают за рекламу? Иначе я не имею малейшего понятия как эти реферальные программы вообще могут работать.\r\n\r\nА теперь сам гайд.\r\n\r\nSwords of Islam - тут всё просто, позволяет играть за мусульман. Соответственно, если вы за них играть не собираетесь, можете смело пропускать. Сами мусульмане в игре всё равно будут, просто вы не сможете за них играть.\r\n\r\n\r\n\r\nLegacy of Rome - посвящено Византийской империи и позволяет такие вещи, как возродить Римскую Империю и починить раскол христианства (фактически объявив католичество ересью). Однако, данное дополнение весьма существенно, даже если вы не собираетесь играть за Византию, т.к. позволяет помимо ополчения иметь пусть небольшую, но регулярную армию.\r\n\r\nSunset Invasion - самое нафиг никому не сдавшееся DLC про вторжение ацтеков в Европу, чисто по приколу. Сам его всегда отключаю, т.к. бессмертная лошадь-сатанист в должности Папы Римского - это ещё куда ни шло, но ацтеки в Европе - это уже совсем не реалистично.\r\n\r\nThe Republic - тут всё так же просто, как с мусульманами, это DLC позволяет играть за торговые республики. Без DLC сами республики всё равно будут, вы просто не сможете за них играть.\r\n\r\nThe Old Gods - добавляет новую дату старта - 867 год (в базовой игре можно выбрать любой день любого месяца между 1066 и 1337 годами, либо одну дату из 936 года, добавленную в бесплатном патче The Iron Century), а также позволяет играть за язычников. Напомню, что в 867 году Русью правил язычник Рюрик. Таким образом, данное DLC позволяет играть за Русь с самого её, Руси, основания. Кроме того, как я уже писал в начале поста, данное DLC можно получить бесплатно.\r\n\r\nSons of Abraham - добавляет дополнительные фичи для авраамических религий, впрочем, в первую очередь для католиков. Но также добавляет возможность играть за евреев (иудеев).\r\n\r\nRajas of India - позволяет играть за религии, присутствующие в Индии. Как всегда, сама Индия будет в игре и без DLC, оно лишь позволяет самому быть индуистом, буддистом или джайнистом.\r\n\r\nCharlemagne - добавляет новую дату старта - 769 год, наместничества (полезная механика для больших империй), возможность создавать кастомные королевства и империи (это не так важно), ивенты про титулярного персонажа - Карла Великого, и новую религию - зунизм (см. династия Зунбиль). Также добавляет племенной тип правления, в том числе для персонажей из более поздних дат, включая Рюрика, которые без этого DLC считаются феодальными.\r\n\r\nWay of Life - добавляет такую фичу как \"жизненный фокус\". Вы можете выбрать для персонажа один из десяти фокусов: правление, предпринимательство, охота, война, семья, попойки, соблазнение, интриги, учёность и теология. Фокус можно менять раз в 5 лет. Очень годное DLC, т.к. актуально для персонажей любых народностей и религий, и полезно как для min-max-инга характеристик, так и для отыгрывания роли.\r\n\r\nHorse Lords - добавляет новый тип правления - кочевой. Без этого DLC кочевники как-бы есть, но имеют либо племенной (с Charlemange), либо феодальный (без него) тип правления. Также добавляет шёлковый путь.\r\n\r\nConclave - ещё одно DLC на пару с Way of Life, актуальное для всех персонажей всех религий. Однако, это не так однозначно встречено сообществом, есть и те, кто его обожают, и те, кто ненавидят. Мне лично оно скорее по нраву, чем нет. Основные фичи:\r\n\r\n- Совет. Голосования по законам теперь проводятся не всеми вассалами, а Советом, при этом число вопросов, которые могут выноситься на голосование, намного больше (в т.ч. объявление войны или казнь) и регулируется опять же законами. Таким образом внутренняя политика становится намного интереснее и разнообразнее и вам предстоит постоянно бороться за власть с этим самым Советом.\r\n\r\n- Услуги. Окажите персонажу услугу и он будет вам должен. Например, можете заставить его проголосовать как нужно в Совете, или отдать вам дочь в жёны, если обычно ему это не позволила бы религия.\r\n\r\n- Переработана система воспитания и образования детей. В старой системе вы отдавали ребёнка на обучение, например, опытному военному и с каким-то шансом он получал образование военного. Теперь вы можете сами выбрать один из восьми детских фокусов (этикет, покорность, гордость, борьба, долг, экономность, вера, наследие), а с 12 лет - направление образования (дипломатия, экономика, война, интриги, учёность). Добавлены ивенты, влияющие на воспитание ребёнка (при этом убраны старые на ту же тему).\r\n\r\n- Переработаны законы. Так, если раньше было по два набора законов: сколько каждый вид вассалов платит вам налогов и сколько даёт войск, чем больше каждого, тем он становился недовольнее, то теперь вместо этого вы выбираете либо больше денег, либо больше войск (и насколько больше). Вместе с Советом появились уже упомянутые законы о том, за что Совет имеет право голосовать. Авторитет короны разделён на более подробные законы. Добавлены законы о правах женщин (для них требуется изучать технологию толерантность).\r\n\r\nThe Reaper\'s Due - ещё одно универсальное DLC, которое подойдёт всем, но не такое обязательное. Если без него вы можете просто \"заболеть\", то с ним есть система с различными симптомами, болезнями, придворным врачом, который может отрезать вам половой орган, если выберете рискованный вариант лечения. Без DLC перонаж мог быть \"покалечен\", теперь же он может быть более конкретно однорук, одноног, одноглаз и т.п. Эпидемии теперь намного более опустошительные, но есть и обратная механика - процветание, которое увеличивается в провинциях со временем, если там не происходит эпидемий и войн. Очень высокое процветание даже позволяет увеличить максимальное количество владений в провинции (но не больше 7, где уже есть 7 - не сработает). Можно строить госпитали. И ещё добавлена возможность требовать у вассалов прекратить войну друг с другом или вернуться к gavelkind наследованию (когда земли разделяются между сыновьями, а не достаются все старшему). Не то, чтобы они обязательно подчинятся, могут попросить что-то взамен.\r\n\r\nMonks and Mystics - добавляет общества, секретные и не очень. Монашеские ордены, герметики (см. герметизм), ассасины, сатанисты. А также возможность исповедовать тайно иную религию, чем явно, и связанные с этим общества. Кроме того, добавляет артефакты, возможность командовать союзниками в войне (очень полезно для племенного типа правления, при котором вассалы не дают вам свои войска, а призываются как союзники), новые задания для советников (жечь еретиков на костре).\r\n\r\nJade Dragon - добавляет вне карты Китай, с которым можно взаимодействовать через специальное окно. Можно становиться подданным Китая, можно дарить им всякое разное (деньги, дочерей, евнухов [не обязательно, чтобы персонаж уже был евнухом, все необходимые манипуляции китайцы произведут сами], артефакты), получая взамен полезные услуги (дочерей, артефакты, разбить вражескую империю). Также добавлены новые casus belli, например насильная вассализация или пограничный спор (позволяет захватить одну соседнюю провинцию без наличия притязаний).\r\n\r\nHoly Fury - ещё одно дополнение с кучей новых фич:\r\n\r\n- Открывает возможность играть за язычников, если нет The Old Gods (но не открывает дату из The Old Gods).\r\n\r\n- При реформации языческой религии теперь можно её кастомизировать (в том числе, если вам не хватило прав женщин из Conclave, можно сделать религию радфемок, которые будут иметь возможность нападать на мужиков только за то, что они мужики... сразу после выхода DLC игроки умудрялись таким способом даже Папу Римского на Маму поменять, но потом этот эксплоит пофиксили).\r\n\r\n- Новая религия - эллинизм. Теперь можно возродить не только Римскую империю, но и религию.\r\n\r\n- Раздробленный или случайный мир. В раздробленном мире каждая провинция, либо каждое графство начинает игру независимым. Случайный мир оставляет карту Европы, но населяет её вымышленными культурами, религиями и государствами. После генерации мира религии можно кастомизировать. Здесь же присутствует пасхалка, благодаря которой дополнение прозвали Holy Furry - возможность в случайный мир добавить среди прочих рандомных культур животных (кони, коты, гуси, драконы, медведи...)\r\n\r\n- Боевые ложи. Общества, посвящённые войне, доступны для язычников, а так же их соседей, если они имеют племенной или кочевой тип правления.\r\n\r\n- Родословные (bloodlines). Позволяют получать бонусы за происхождение от легендарных личностей, или стать такой личностью самому и основать свою родословную. Родословные можно собирать, gotta catch \'em all!\r\n\r\n- Возможность преследовать дружбу, либо наоборот вражду, с персонажами.\r\n\r\n- Новые ивенты для крестовых походов, например взять целью Константинополь (но сама новая механика крестовых походов в DLC не входит, а является бесплатной).\r\n\r\n- Прочие фичи поменьше типа коронации и крещения.\r\n\r\nБОНУС за то, что дочитали до конца: Предок Рюрика в дате из Charlemange.\r\n\r\nВ 769 году на месте Руси лишь разрозненные славянские племена, Рюрик ещё даже не рождался. Однако, есть теория, что наш Рюрик - это то же лицо, что Рёрик Ютландский. В таком случае его предком жившим на тот момент является Харальд Боезуб из рода Скьёльдунгов, король Дании, годом позже убитый Сигурдом Кольцо, захватившим престол. За него можно играть.', 'crusaderkingsdls', '', NULL, NULL, 0, 0),
(3, 'Как прокси применяют в информационной безопасности: 6 практических сценариев использования\r\n', 'Прокси-серверы обычно используются в качестве «прокладки» между клиентом и веб-сайтом или онлайн-сервисов. Направление трафика через прокси помогает пользователям скрывать свое реальное местоположение и IP-адрес. При этом, прокси используют и компании (см. обратные прокси) для решения множества задач от повышения уровня информационной безопасности, до выполнения анонимных задач и контроля использования интернета сотрудниками.\r\n\r\nСегодня поговорим о том, как технология прокси реально используется разными компаниями для повышения уровня защищенности их инфраструктуры.\r\n\r\nСокрытие информации от взломщиков\r\n\r\nК примеру, часто такие прокси используют как SSL-шлюз. В таком случае компания может отвечать на внешние HTTP-запросы не боясь раскрыть структуру своей сети. Выступая в качестве медиатора между внешними клиентами и бэкендом внутренней сети, прокси могут скрывать реальной устройство инфраструктуры компании. Без прокси запросы отправлялись бы непосредственно серверам, а те отвечали бы на них – это могло бы дать злоумышленникам информацию об устройстве сети и возможных слабых местах в ее защите.\r\n\r\nЕще один тип прокси, полезных для задач безопасности – резидентные прокси. По сути – это адреса выданные пользователям реальным интернет-провайдером из определенного города, области или штата. Обычно эти адреса выдают владельцам жилья, они отмечаются в базах данных региональных интернет-регистров (RIR). При правильном использовании запросы с таких адресов невозможно отличить от обращений реального пользователя.\r\n\r\nЧасто резидентные прокси используют для конкурентной разведки, скрейпинга данных с сайтов и обхода антибот-систем. В свою очередь, компании могут использовать ротируемые резидентные прокси для повышения безопасности корпоративной сети или сайта. Если на запросы потенциальных злоумышленников будут отвечать сервера из разных стран и регионов, информацию о реальном устройстве сети получить будет невозможно.\r\n\r\nМы в Infatica предоставляем как раз такой сервис ротируемых резидентных прокси – и многие наши заказчики используют его именно для обеспечения безопасности своей инфраструктуры.\r\n\r\nШифрование и расшифровка трафика\r\n\r\nЧаще всего компании применяют так называемые обратные прокси – обычно это прокси-сервер за файрволлом корпоративной сети. Он перенаправляет внешние клиентские запросы на серверы внутри сети. Обратные прокси могут использоваться и для решения таких задач, как шифрование проходящего трафика.\r\n\r\nКроме того, прокси полезны для работы с уже зашифрованным трафиком. Использование обратных прокси для входящих соединений по HTTPS позволяет расшифровывать контент при приеме и отправлять внутри сети уже его расшифрованную версию.\r\n\r\nЭто несет целый ряд плюсов. Например, вам не нужно будет устанавливать сертификаты безопасности на бэкенд-серверы. Кроме того, у вас будет лишь одна точка, в которой нужно настраивать SSL/TLS. Кроме того, поскольку серверам внутри сети не нужно производить ресурсоемкие операции расшифровки контента, нагрузка на них ощутимо снижается.\r\n\r\nМониторинг и оптимизация затрат на защиту\r\n\r\nПрименение обратных прокси также помогает повысить уровень защищенности, давая компании точку, в которую стекается весь трафик – и здесь его проще всего мониторить и логировать.\r\n\r\nКроме того, если все находящиеся за файрволлом серверы сначала отправляют трафик на прокси-сервер на периметре, то защитив его, общий уровень безопасности вырастет (а иначе надо было бы выделять ресурсы на защиту всех серверов).\r\n\r\nКонтроль доступа\r\n\r\nПрокси не только полезны для балансировки и распределения трафика и нагрузки в сети, но могут использовать для ограничения доступа к определенным ресурсам в сети. Прокси-сервер может выступать шлюзом для доступа к отдельным сегментам сети, серверам или сервисам, причем как для внешних пользователей, так и для сотрудников компании.\r\n\r\nЗаключение\r\n\r\nКомпании активно используют прокси разных типов для решения задач, связанных с повышением уровня защищенности их инфраструктуры. Прокси могут использоваться как инструмент контроля доступа, логирования, шифрования трафика и даже сокрытия реального устройства внутренней инфраструктуры.', 'secureproxy', '', NULL, NULL, 0, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2014_10_12_000000_create_users_table', 1),
(2, '2014_10_12_100000_create_password_resets_table', 1),
(3, '2019_08_19_000000_create_failed_jobs_table', 1),
(4, '2019_10_22_153600_create_maintexts_table', 2);

-- --------------------------------------------------------

--
-- Структура таблицы `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `email_verified_at`, `password`, `remember_token`, `created_at`, `updated_at`) VALUES
(1, 'Тестер', 'tester@gmail.com', NULL, '$2y$10$gMoJVzFNSKq/YNT2JJAf8eLI3DxBW1Ibv0XjX.ewYzU1nX4t.t/86', 'Xy0NYkOtLD4zSvPIItcq2d7q8ilGCIqcN7G4CirBspht2tRdocynwpQOQ415', '2019-10-17 13:40:26', '2019-10-17 13:40:26');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `failed_jobs`
--
ALTER TABLE `failed_jobs`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `maintexts`
--
ALTER TABLE `maintexts`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `failed_jobs`
--
ALTER TABLE `failed_jobs`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT для таблицы `maintexts`
--
ALTER TABLE `maintexts`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
